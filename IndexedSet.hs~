{-# LANGUAGE ExistentialQuantification, MultiParamTypeClasses, TypeSynonymInstances, FlexibleInstances #-}
module IndexedSet where

import Data.Map (Map)
import qualified Data.Map as M
import Data.Set (Set)
import qualified Data.Set as S

data IndexedSet a = IndexedSet (Set a) (Map Index (SetIndex a))

insert :: (Ord a) => a -> IndexedSet a -> IndexedSet a
insert a (IndexedSet s m) = IndexedSet (S.insert a s) 
                            (M.map (\(SetIndex fn mp) -> SetIndex fn (M.insert (fn a) a mp)) m)

instance Show (IndexedSet Integer) where
  show (IndexedSet s ixmap) = show s ++ "\n" ++ show ixmap

instance Show (SetIndex Integer) where
  show (SetIndex fn mp) = show mp

type Index = Int

-- TODO: Remove Show requirement, only useful for debugging
data SetIndex a = forall b. (Indexable a b, Ord b, Show a, Show b) => SetIndex (a -> b) (Map b a)

class Indexable a b where

instance Indexable a b where

ixa :: SetIndex Integer
ixa = SetIndex show M.empty
ixb :: SetIndex Integer
ixb = SetIndex (1+) M.empty